@* PartialView 的 CSS *@
<style asp-add-nested-styles="true">

    /***** datatables 自訂樣式 *****/

    /* 頂部布局調整 */
    .dt-start {
    }

    .dt-end .dt-search {
        text-align: center !important;
    }

    .dt-middle {
        text-align: end !important;
    }

    /* 日夜模式 自定義 樣式 */
    html[data-bs-theme="dark"] .Edit-btn {
        background-color: #007FFF;
    }

        html[data-bs-theme="dark"] .Edit-btn svg {
            color: white;
        }

        html[data-bs-theme="dark"] .Edit-btn:hover {
            background-color: white;
        }

            html[data-bs-theme="dark"] .Edit-btn:hover svg {
                color: #007FFF;
            }

    html[data-bs-theme="light"] .Edit-btn {
        background-color: white;
    }

        html[data-bs-theme="light"] .Edit-btn svg {
            color: #007FFF;
        }

        html[data-bs-theme="light"] .Edit-btn:hover {
            background-color: #007FFF;
        }

            html[data-bs-theme="light"] .Edit-btn:hover svg {
                color: white;
            }

    html[data-bs-theme="dark"] .Enter-btn {
        background-color: #00FF00;
    }

        html[data-bs-theme="dark"] .Enter-btn svg {
            color: white;
        }

        html[data-bs-theme="dark"] .Enter-btn:hover {
            background-color: white;
        }

            html[data-bs-theme="dark"] .Enter-btn:hover svg {
                color: #00FF00;
            }

    html[data-bs-theme="light"] .Enter-btn {
        background-color: white;
    }

        html[data-bs-theme="light"] .Enter-btn svg {
            color: #00FF00;
        }

        html[data-bs-theme="light"] .Enter-btn:hover {
            background-color: #00FF00;
        }

            html[data-bs-theme="light"] .Enter-btn:hover svg {
                color: white;
            }

    html[data-bs-theme="dark"] .Reset-btn {
        background-color: #FF0000;
    }

        html[data-bs-theme="dark"] .Reset-btn svg {
            color: white;
        }

        html[data-bs-theme="dark"] .Reset-btn:hover {
            background-color: white;
        }

            html[data-bs-theme="dark"] .Reset-btn:hover svg {
                color: #FF0000;
            }

    html[data-bs-theme="light"] .Reset-btn {
        background-color: white;
    }

        html[data-bs-theme="light"] .Reset-btn svg {
            color: #FF0000;
        }

        html[data-bs-theme="light"] .Reset-btn:hover {
            background-color: #FF0000;
        }

            html[data-bs-theme="light"] .Reset-btn:hover svg {
                color: white;
            }

    /* 推薦設定 文字顏色 */
    .green-row {
        color: green !important;
    }

    .blue-row {
        color: blue !important;
    }

    .red-row {
        color: red !important;
    }

    /* popover 初始樣式 */
    .popover {
        /* 初始透明度 0 */
        opacity: 0;
    }
        /* popover 顯示 */
        .popover.show {
            transition: opacity 0.5s ease;
            opacity: 1;
        }

    /* popover 成功 CSS */
    .popover-success {
        background-color: #dff0d8;
        border-color: #d6e9c6;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 40px;
    }

    /* popover 失敗 CSS */
    .popover-fail {
        background-color: #f2dede;
        border-color: #ebccd1;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 40px;
    }

    /* 表格的佈局採用固定佈局算法 */
    body {
        table-layout: fixed;
    }

    /* 欄位預設樣式 */
    html[data-bs-theme="dark"] .defaultcellType {
        border: none; /* 取消邊框 */
        background-color: transparent; /* 背景透明 */
        appearance: none; /* 去除默認樣式 */
        color: #c2c2d9; /* 文字顏色 */
    }

    html[data-bs-theme="light"] .defaultcellType {
        border: none; /* 取消邊框 */
        background-color: transparent; /* 背景透明 */
        appearance: none; /* 去除默認樣式 */
        color: #607080; /* 文字顏色 */
    }
</style>
@* PartialView 的 HTML *@
<div class="page-title position-relative">
    <div class="row">
        @* 系統名稱 *@
        <div class="col-12 col-md-6 order-md-1 d-flex justify-content-center justify-content-md-start">
            <h2 id="SystemName" style="margin-top: 8px;">產品管理系統</h2>
        </div>
        @* 系統選單 *@
        <div class="col-12 col-md-6 order-md-2 d-flex justify-content-center justify-content-md-end" id="SystemMenu">
            <select asp-items="@ViewBag.ComputerParts" class="form-select " style="width:250px;height:40px;margin-bottom:8px" id="HardSelect">
                <option value="" disabled selected hidden>---- 請選擇硬體 ----</option>
            </select>
        </div>
    </div>
</div>
<section class="section">
    <table id="HardwareManageTable" class="display" style="width:100%">
        <thead id="HardwareThead">
            <tr>
                <th data-priority="1">ID</th>
                <th>產品名稱</th>
                <th>規格</th>
                <th>種類</th>
                <th>價格</th>
                <th>瓦數</th>
                <th>推薦</th>
                <th data-priority="2" class="text-center">
                    <div class="spinner-border spinner-border-sm" role="status" style="display:none" id="HardwareLoading">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </th>
            </tr>
        </thead>
    </table>
</section>
<img src="~/img/loading-block-white.gif" style="width:30px;height:30px;display:none" id="HardwareLoading" />
<span id="UpdateResult" style="color:white" class="h3"></span>
@* PartialView 的 JavaScript *@
<script>
    $(document).ready(function () {

        let HardAddress = "https://localhost:7097";
        // 日夜變更按鈕
        const btnTheme = document.querySelector("#toggle-dark");
        const tableThead = document.querySelector("#HardwareThead");

        // 單一零件更新
        function UpdateOneHardware() {
            // 清空結果訊息
            $("#UpdateResult").text("");
            // 取得 零件ID
            let p = getType();
            if (p == "NoSeclect") {
                $("#UpdateResult").text("請選擇要更新的硬體種類").fadeIn(200, function () {
                    // 在 fadeIn 完成后延遲 1000 毫秒，執行 fadeOut
                    $(this).delay(1000).fadeOut(300);
                });;;
                return;
            }
            // 顯示進度條
            $("#HardwareLoading").show();
            // 發送非同步POST請求 ==> 資料庫資料變更
            let itemid = Number(p.slice(5));
            var data = {
                Type: itemid
            };
            fetch(`@Url.Action("UpdateHardwareOne", "Admin")`, {
                method: "POST",
                body: JSON.stringify(data),
                headers: {
                    "Content-Type": "application/json"
                }
            }).then(result => {
                // 此時 result 是一個請求結果的物件
                // 注意傳回值型態，字串用 text()，JSON 用 json()
                $("#HardwareLoading").hide();
                //  如過 HTTP 響應的狀態馬碼在 200 到 299 的範圍內 ==> .ok 會回傳 true
                if (result.ok) {
                    return result.text();
                }
            }).then(data => {
                // 此時 data 為上一個 then 回傳的資料
                $("#UpdateResult").text(data).fadeIn(200, function () {
                    // 在 fadeIn 完成后延遲 1000 毫秒，執行 fadeOut
                    $(this).delay(1000).fadeOut(300);
                });;
                getdatatableData();
            }).catch(error => {
                $("#HardwareLoading").hide();
                $("#UpdateResult").text(data).fadeIn(200, function () {
                    // 在 fadeIn 完成后延遲 1000 毫秒，執行 fadeOut
                    $(this).delay(1000).fadeOut(300);
                });;
                alert(error);
            });
        };

        // 全零件更新
        function UpdateAllHardware() {
            // 清空結果訊息
            $("#UpdateResult").text("");
            // 顯示進度條
            $("#HardwareLoading").show();
            // 發送非同步POST請求 ==> 資料庫資料變更
            fetch(`@Url.Action("UpdateHardwareAll", "Admin")`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                }
            }).then(result => {
                // 此時 result 是一個請求結果的物件
                // 注意傳回值型態，字串用 text()，JSON 用 json()
                $("#HardwareLoading").hide();
                //  如過 HTTP 響應的狀態馬碼在 200 到 299 的範圍內 ==> .ok 會回傳 true
                if (result.ok) {
                    return result.text();
                }
            }).then(data => {
                // 此時 data 為上一個 then 回傳的資料
                $("#UpdateResult").text(data).fadeIn(200, function () {
                    // 在 fadeIn 完成后延遲 1000 毫秒，執行 fadeOut
                    $(this).delay(1000).fadeOut(300);
                });;
                let p = getType();
                if (p != "NoSeclect") {
                    getdatatableData();
                }
            }).catch(error => {
                $("#HardwareLoading").hide();
                $("#UpdateResult").text(data).fadeIn(200, function () {
                    // 在 fadeIn 完成后延遲 1000 毫秒，執行 fadeOut
                    $(this).delay(1000).fadeOut(300);
                });;
                alert(error);
            });
        };

        // 初始化 Datatables
        var datatable = new DataTable('#HardwareManageTable', {
            // column 定義
            columns: [
                { "data": "productId", "width": "5%", "className": "text-center" },
                { "data": "productName", "width": "35%" },
                { "data": "specification", "width": "30%" },
                { "data": "componentClassificationName", "visible": false },
                { "data": "price", "width": "10%", "className": "text-center" },
                {
                    "data": "wattage",
                    "width": "10%",
                    "className": "text-center",
                    // 瓦數 ~ 文字輸入方塊
                    render: function (data, type, row, meta) {
                        // 此處 type 為 'sort' 表示 DataTables 正在進行排序
                        if (type === 'sort') {
                            // 返回元素的值作為排序依據
                            return data;
                        }
                        // 取得 productId
                        let productId = row.productId;
                        // input 欄位 ~ 可編輯
                        let inputEle = `<input type="text" class="${productId}_watt defaultcellType" value="${data}" style="width: 50px; text-align: center;"  disabled>`;
                        return inputEle;
                    },
                    // 將此列的數據類型設置為數字 ~ 排序才會正常運作
                    "type": "num"
                },
                {
                    "data": "recommend",
                    "width": "10%",
                    "className": "text-center",
                    // 推薦 ~ 下拉式選單
                    render: function (data, type, row, meta) {
                        // 此處 type 為 'sort' 表示 DataTables 正在進行排序
                        if (type === 'sort') {
                            // 返回元素的值作為排序依據
                            return data;
                        }
                        // 取得 productId
                        let productId = row.productId;
                        const isRec1 = data == 0 ? 'selected' : '';
                        const isRec2 = data == 1 ? 'selected' : '';
                        const isRec3 = data == 2 ? 'selected' : '';
                        const isRec4 = data == 3 ? 'selected' : '';
                        const ele1 = `<option value = "0" ${isRec1}>無</option>`;
                        const ele2 = `<option value = "1" ${isRec2}>基本</option>`;
                        const ele3 = `<option value = "2" ${isRec3}>優良</option>`;
                        const ele4 = `<option value = "3" ${isRec4}>完美</option>`;
                        // select 欄位 ~ 可編輯
                        let selectEle = `<select class="${productId}_recommend defaultcellType" disabled>${ele1}${ele2}${ele3}${ele4}</select>`;
                        return selectEle;
                    },
                    // 將此列的數據類型設置為數字 ~ 排序才會正常運作
                    "type": "num"
                },
                {
                    "data": null,
                    "orderable": false,
                    "width": "10%",
                    // 按鈕 自定義
                    render: function (data, type, row, meta) {
                        // 取得 productId
                        let productId = row.productId;
                        // 編輯按鈕
                        let editEle = `<button class="${productId}_edit btn Edit-btn d-flex justify-content-center align-items-center" style="width:30px;height:30px;" data-bs-toggle="popover" data-bs-content="nothing"><i class="fa-solid fa-pen-to-square"></i></button>`;
                        let div = `<div id="${productId}_div">${editEle}</div>`;
                        // 復原按鈕
                        let resetEle = `<button class="${productId}_reset btn Reset-btn d-flex justify-content-center align-items-center" style="width:30px;height:30px;" data-bs-toggle="popover" data-bs-content="nothing"><i class="fa-solid fa-rotate-right"></i></button>`;
                        if (type === 'display') {
                            return `${div}&nbsp;&nbsp;&nbsp;${resetEle}`;
                        }
                        return data;
                    },
                    "type": "html"
                }
            ],
            // 標頭固定
            fixedHeader: {
                // 固定 header
                header: true,
                // 使用導覽欄的高度作為偏移量
                headerOffset: $('#pageNav').outerHeight(),
            },
            // 響應式設計
            responsive: true,
            // 語言設定
            language: {
                url: '//cdn.datatables.net/plug-ins/2.0.3/i18n/zh-HANT.json',
            },
            // 預設排序 ~ 根據第一個欄位 升冪排序
            order: [[1, 'asc']],
            // 行分組
            rowGroup: {
                dataSrc: 'componentClassificationName',
            },
            // 資料載入中 gif
            processing: true,
            // 自動寬度 關閉
            autoWidth: true,
            // 資料行樣式
            createdRow: function (row, data, dataIndex) {
                if (data.recommend === 1) {
                    row.classList.add('green-row');
                } else if (data.recommend === 2) {
                    row.classList.add('blue-row');
                } else if (data.recommend === 3) {
                    row.classList.add('red-row');
                }
                // 加上 ID
                $(row).attr('id', data.productId + '_row');
                // 為特定行加入 class ==> 不會影響 th
                $(row).find('td:eq(6)').addClass('d-flex');
                $(row).find('td:eq(6)').addClass('justify-content-between');
            },
            // 按鈕建立
            layout: {
                topMiddle: {
                    buttons: [
                        {
                            // 按鈕顯示的文本
                            text: '單一零件更新',
                            // 按鈕點擊事件
                            action: function (e, dt, node, config) {
                                // 單一零件更新
                                UpdateOneHardware();
                            }
                        },
                        {
                            // 按鈕顯示的文本
                            text: '全零件更新',
                            // 按鈕點擊事件
                            action: function (e, dt, node, config) {
                                // 全零件更新
                                UpdateAllHardware();
                            }
                        },

                    ]
                },
            },
        });


        // 資料編輯 ~ 當任何具有 Edit-btn 的元素被點擊時觸發
        $(document).on('click', '.Edit-btn', function () {
            // 被隱藏的按鈕不能觸發
            if ($(this).css('display') !== 'none') {
                // 取得 ID
                let productId = Number($(this).attr('class').slice(0, 5));
                // 更換成確認按鈕
                let enterEle = `<button class="${productId}_enter btn Enter-btn d-flex justify-content-center align-items-center" style="width:30px;height:30px;" data-bs-toggle="popover" data-bs-content="nothing"><i class="fa-solid fa-check"></i></button>`;
                $(`#${productId}_div`).html(enterEle);
                // 編輯模式 ~ 開啟 td 編輯功能
                $(`.${productId}_watt`).prop('disabled', false);
                $(`.${productId}_watt`).removeClass("defaultcellType");
                $(`.${productId}_recommend`).prop('disabled', false);
                $(`.${productId}_recommend`).removeClass("defaultcellType");
            }
        });

        // 資料變更 ~ 當任何具有 Enter-btn 的元素被點擊時觸發
        $(document).on('click', '.Enter-btn', function () {
            // 被隱藏的按鈕不能觸發
            if ($(this).css('display') !== 'none') {
                // 取得 ID
                let productId = Number($(this).attr('class').slice(0, 5));
                // 更換成編輯按鈕
                let editEle = `<button class="${productId}_edit btn Edit-btn d-flex justify-content-center align-items-center" style="width:30px;height:30px;" data-bs-toggle="popover" data-bs-content="nothing"><i class="fa-solid fa-pen-to-square"></i></button>`;
                $(`#${productId}_div`).html(editEle);

                // 資料庫變更
                // 取資料 ~ 只取看的見的元素
                let wattVal = Number($(`.${productId}_watt:visible`).val());
                let recVal = Number($(`.${productId}_recommend:visible`).val());
                


                // 恢復預設模式 ~ 關閉 td 編輯功能
                $(`.${productId}_watt`).attr('disabled', true);
                $(`.${productId}_watt`).addClass("defaultcellType");
                $(`.${productId}_recommend`).attr('disabled', true);
                $(`.${productId}_recommend`).addClass("defaultcellType");

            }
        });

        // 資料還原 ~ 當任何具有 Enter-btn 的元素被點擊時觸發
        $(document).on('click', '.Reset-btn', function () {
            // 被隱藏的按鈕不能觸發
            if ($(this).css('display') !== 'none') {
                // 取得 ID
                let productId = Number($(this).attr('class').slice(0, 5));
            }
        });

        // function btnResetEvent() {
        //     // 綁定所有 button 標籤 id 為 _enter 結尾的元素
        //     $('button[id$="_reset"]').on('click', function (event) {
        //         // 取得 ID
        //         let id = Number($(this).attr('id').slice(0, -6));

        //         // 更改提示泡泡內容
        //         let popcontent = '<i class="fa-solid fa-xmark"></i>&nbsp;&nbsp;變更失敗';
        //         $(this).attr('data-bs-content', popcontent);
        //         // 顯示提示泡泡
        //         $(this).popover('show');
        //         // 更改顏色 ~ 紅色
        //         $('.popover').last().find('.popover-body').css('color', '#ff0000');
        //         // 自訂提示泡泡 CSS
        //         $('.popover').last().addClass('popover-fail');
        //         // 設置一段時間後隱藏提示泡泡
        //         setTimeout(function () {
        //             $(this).popover('hide');
        //         }.bind(this), 1000); // 這裡的 1000 表示延遲 1 秒後隱藏提示泡泡
        //     });
        // };


        // 提示泡泡 ~ popover 初始化
        function btnPopoverInitialization() {
            $('[data-bs-toggle="popover"]').popover({
                // 指定彈出方向為上方
                placement: 'top',
                // 不顯示箭頭
                template: '<div class="popover" role="tooltip"><h3 class="popover-header"></h3><div class="popover-body"></div></div>',
                // 禁用預設動畫
                animation: false,
                // 手動觸發提示泡泡
                trigger: 'manual',
                // 顯示 html 元素
                html: true,
            });
        };

        // 獲取下拉式選單的資料類型
        function getType() {
            var selectedOption = $("#HardSelect").val();
            switch (selectedOption) {
                case "CPU 中央處理器":
                    return encodeURI("Type=10000");
                    break;
                case "GPU 顯示卡":
                    return encodeURI("Type=10001");
                    break;
                case "RAM 記憶體":
                    return encodeURI("Type=10002");
                    break;
                case "MotherBoard 主機板":
                    return encodeURI("Type=10003");
                    break;
                case "SSD 固態硬碟":
                    return encodeURI("Type=10004");
                    break;
                case "HDD 傳統硬碟":
                    return encodeURI("Type=10005");
                    break;
                case "AirCooler 風冷散熱器":
                    return encodeURI("Type=10006");
                    break;
                case "LiquidCooler 水冷散熱器":
                    return encodeURI("Type=10007");
                    break;
                case "CASE 機殼":
                    return encodeURI("Type=10008");
                    break;
                case "PSU 電源供應器":
                    return encodeURI("Type=10009");
                    break;
                case "OS 作業系統":
                    return encodeURI("Type=10010");
                    break;
                default:
                    return "NoSeclect";
            };
        };

        // AJAX 資料載入 datatable
        function getdatatableData() {
            let p = getType();
            // 發送非同步GET請求
            fetch(`@Url.Action("HardwareData", "HardwareManagement", new { area = "Administrator" })?${p}`, {
                method: "GET"
            }).then(result => {
                // 此時 result 是一個請求結果的物件
                // 注意傳回值型態，字串用 text()，JSON 用 json()
                if (result.ok) {
                    return result.json();
                }
            }).then(data => {
                // 此時 data 為上一個 then 回傳的資料
                // 清空表格
                datatable.clear().draw();
                // 添加新的資料
                datatable.rows.add(data).draw();
                btnPopoverInitialization();
            }).catch(error => {
                alert(error);
            });
        };

        $("#HardSelect").change(function () {
            getdatatableData();
        });

        // RowDetail 內容
        // function format(d) {
        //     let color = "black"; // 默認顏色
        //     let RadioId = "recommend" + d.productId;
        //     return (
        //         `<div id="recommend${d.productId}" style="color: black;"> 推薦設定:
        //                                                                                                                                                                 <label style="color: black;"><input type="radio" name="${RadioId}" value="0" ${d.recommend == 0 ? 'checked' : ''}> 無</label>
        //                                                                                                                                                                     <label style="color: green;"><input type="radio" name="${RadioId}" value="1" ${d.recommend == 1 ? 'checked' : ''}> 基本</label>
        //                                                                                                                                                                     <label style="color: blue;"><input type="radio" name="${RadioId}" value="2" ${d.recommend == 2 ? 'checked' : ''}> 優良</label>
        //                                                                                                                                                                     <label style="color: red;"><input type="radio" name="${RadioId}" value="3" ${d.recommend == 3 ? 'checked' : ''}> 完美</label>
        //                                                                                                                                                                     <i class="fa-solid fa-spinner fa-spin ms-2"style="color:black;display:none" id="loading${d.productId}"></i>
        //                                                                                                                                                                         <span id="result${d.productId}" class="ms-2" style="color: black;"></span>
        //                                                                                                                                                              </div>`
        //     );
        // };
        // 推薦變更事件W
        // function radioevent(rowDetail) {
        //     $(rowDetail).on('change', 'input[type="radio"]', function () {
        //         // 獲取 Radiobutton 的 ID
        //         let itemid = Number($(this).attr('name').slice('9'));
        //         let value = Number($(this).val());

        //         // 發送非同步POST請求 ==> 資料庫資料變更
        //         // 顯示進度條
        //         $("#loading" + itemid).show();
        //         $("#result" + itemid).text("");
        //         var data = {
        //             ProductId: itemid,
        //             recommend: value
        //         };
        //         fetch(`${HardAddress}@Url.Action("recommendChange", "Admin")`, {
        //             method: "POST",
        //             body: JSON.stringify(data),
        //             headers: {
        //                 "Content-Type": "application/json"
        //             }
        //         }).then(result => {
        //             // 此時 result 是一個請求結果的物件
        //             // 注意傳回值型態，字串用 text()，JSON 用 json()
        //             $("#loading" + itemid).hide();
        //             //  如過 HTTP 響應的狀態馬碼在 200 到 299 的範圍內 ==> .ok 會回傳 true
        //             if (result.ok) {
        //                 return result.text();
        //             }
        //         }).then(data => {
        //             // 此時 data 為上一個 then 回傳的資料
        //             $("#result" + itemid).text(data).fadeIn(200, function () {
        //                 // 在 fadeIn 完成后延遲 1000 毫秒，執行 fadeOut
        //                 $(this).delay(1000).fadeOut(300);
        //             });;
        //         }).catch(error => {
        //             $("#result" + itemid).text(data).fadeIn(200, function () {
        //                 // 在 fadeIn 完成后延遲 1000 毫秒，執行 fadeOut
        //                 $(this).delay(1000).fadeOut(300);
        //             });;
        //             alert(error);
        //         });

        //         // 前端視覺效果
        //         let divid = "recommend" + itemid;
        //         let targetRow = $(`#${divid}`).parent().parent().prev();
        //         let colorclass = "";
        //         switch (value) {
        //             case 0:
        //                 colorclass = "black-row";
        //                 break;
        //             case 1:
        //                 colorclass = "green-row";
        //                 break;
        //             case 2:
        //                 colorclass = "blue-row";
        //                 break;
        //             case 3:
        //                 colorclass = "red-row";
        //                 break;
        //         }
        //         if (targetRow.hasClass('black-row')) {
        //             targetRow.removeClass('black-row');
        //             targetRow.addClass(colorclass);
        //         }
        //         else if (targetRow.hasClass('green-row')) {
        //             targetRow.removeClass('green-row');
        //             targetRow.addClass(colorclass);
        //         }
        //         else if (targetRow.hasClass('blue-row')) {
        //             targetRow.removeClass('blue-row');
        //             targetRow.addClass(colorclass);
        //         }
        //         else if (targetRow.hasClass('red-row')) {
        //             targetRow.removeClass('red-row');
        //             targetRow.addClass(colorclass);
        //         }
        //     });
        // }

        // Add event listener for opening and closing details
        // $('#HardwareManageTable tbody').on('click', 'td.details-control', function () {
        //     var tr = $(this).closest('tr');
        //     var row = datatable.row(tr);
        //     if (row.child.isShown()) {
        //         // This row is already open - close it
        //         row.child.hide();
        //         tr.removeClass('shown');
        //         $(this).find('.detailIcon').text("▶");
        //     }
        //     else {
        //         // Open this row
        //         row.child(format(row.data())).show();
        //         tr.addClass('shown');
        //         $(this).find('.detailIcon').text("▼");

        //         // 獲取子元素（row.detail）
        //         var rowDetail = $(tr).next();
        //         // 綁定事件(推薦變更)
        //         radioevent(rowDetail);
        //     }
        // });



    });
</script>