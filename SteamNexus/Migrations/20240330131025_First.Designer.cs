// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SteamNexus.Data;

#nullable disable

namespace SteamNexus.Migrations
{
    [DbContext(typeof(SteamNexusDbContext))]
    [Migration("20240330131025_First")]
    partial class First
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SteamNexus.Models.CPU", b =>
                {
                    b.Property<int>("CPUId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CPUId"), 10000L);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("CPUId");

                    b.ToTable("CPUs");
                });

            modelBuilder.Entity("SteamNexus.Models.GPU", b =>
                {
                    b.Property<int>("GPUId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GPUId"), 10000L);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("GPUId");

                    b.ToTable("GPUs");
                });

            modelBuilder.Entity("SteamNexus.Models.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameId"), 10000L);

                    b.Property<string>("AgeRating")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("AppId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CommentNum")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<int>("CurrentPrice")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("LowestPrice")
                        .HasColumnType("int");

                    b.Property<int>("MinReqId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OriginalPrice")
                        .HasColumnType("int");

                    b.Property<int?>("PeakPlayers")
                        .HasColumnType("int");

                    b.Property<int?>("Players")
                        .HasColumnType("int");

                    b.Property<string>("Publisher")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RecReqId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VideoPath")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("GameId");

                    b.HasIndex("MinReqId");

                    b.HasIndex("RecReqId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("SteamNexus.Models.GameLanguage", b =>
                {
                    b.Property<int>("GameLanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameLanguageId"), 10000L);

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.HasKey("GameLanguageId");

                    b.HasIndex("GameId");

                    b.HasIndex("LanguageId");

                    b.ToTable("GameLanguages");
                });

            modelBuilder.Entity("SteamNexus.Models.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageId"), 10000L);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("SteamNexus.Models.MinimumRequirement", b =>
                {
                    b.Property<int>("MinReqId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MinReqId"), 10000L);

                    b.Property<string>("Audio")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CPUId")
                        .HasColumnType("int");

                    b.Property<string>("DirectX")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("GPUId")
                        .HasColumnType("int");

                    b.Property<int>("GPUId1")
                        .HasColumnType("int");

                    b.Property<string>("Network")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OS")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RAM")
                        .HasColumnType("int");

                    b.Property<string>("Storage")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MinReqId");

                    b.HasIndex("GPUId");

                    b.HasIndex("GPUId1");

                    b.ToTable("MinimumRequirements");
                });

            modelBuilder.Entity("SteamNexus.Models.PlayersHistory", b =>
                {
                    b.Property<int>("PlayersHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayersHistoryId"), 10000L);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("Players")
                        .HasColumnType("int");

                    b.HasKey("PlayersHistoryId");

                    b.HasIndex("GameId");

                    b.ToTable("PlayersHistories");
                });

            modelBuilder.Entity("SteamNexus.Models.PriceHistory", b =>
                {
                    b.Property<int>("PriceHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceHistoryId"), 10000L);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("PriceHistoryId");

                    b.HasIndex("GameId");

                    b.ToTable("PriceHistories");
                });

            modelBuilder.Entity("SteamNexus.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductCategoryId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductCategoryId");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("SteamNexus.Models.ProductCpu", b =>
                {
                    b.Property<int>("ProductCpuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductCpuid"));

                    b.Property<int>("Cpuid")
                        .HasColumnType("int");

                    b.Property<int>("ProductInformationId")
                        .HasColumnType("int");

                    b.HasKey("ProductCpuid");

                    b.HasIndex("Cpuid");

                    b.HasIndex("ProductInformationId");

                    b.ToTable("ProductCpu");
                });

            modelBuilder.Entity("SteamNexus.Models.ProductGpu", b =>
                {
                    b.Property<int>("ProductGpuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductGpuid"));

                    b.Property<int>("Gpuid")
                        .HasColumnType("int");

                    b.Property<int>("ProductInformationId")
                        .HasColumnType("int");

                    b.HasKey("ProductGpuid");

                    b.HasIndex("Gpuid");

                    b.HasIndex("ProductInformationId");

                    b.ToTable("ProductGpu");
                });

            modelBuilder.Entity("SteamNexus.Models.ProductInformation", b =>
                {
                    b.Property<int>("ProductInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductInformationId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("Recommend")
                        .HasColumnType("int");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Wattage")
                        .HasColumnType("int");

                    b.HasKey("ProductInformationId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("ProductInformation");
                });

            modelBuilder.Entity("SteamNexus.Models.ProductRam", b =>
                {
                    b.Property<int>("ProductRamid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductRamid"));

                    b.Property<int>("ProductInformationId")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.HasKey("ProductRamid");

                    b.HasIndex("ProductInformationId");

                    b.ToTable("ProductRam");
                });

            modelBuilder.Entity("SteamNexus.Models.RecommendedRequirement", b =>
                {
                    b.Property<int>("RecReqId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecReqId"), 10000L);

                    b.Property<string>("Audio")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CPUId")
                        .HasColumnType("int");

                    b.Property<string>("DirectX")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("GPUId")
                        .HasColumnType("int");

                    b.Property<int>("GPUId1")
                        .HasColumnType("int");

                    b.Property<string>("Network")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OS")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RAM")
                        .HasColumnType("int");

                    b.Property<string>("Storage")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RecReqId");

                    b.HasIndex("GPUId");

                    b.HasIndex("GPUId1");

                    b.ToTable("RecommendedRequirements");
                });

            modelBuilder.Entity("SteamNexus.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"), 10000L);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("SteamNexus.Models.TagGroup", b =>
                {
                    b.Property<int>("TagGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagGroupId"), 10000L);

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("TagGroupId");

                    b.HasIndex("GameId");

                    b.HasIndex("TagId");

                    b.ToTable("TagGroups");
                });

            modelBuilder.Entity("SteamNexus.Models.Game", b =>
                {
                    b.HasOne("SteamNexus.Models.MinimumRequirement", "MinReq")
                        .WithMany("Games")
                        .HasForeignKey("MinReqId")
                        .IsRequired()
                        .HasConstraintName("FK_Games_MinimumRequirements");

                    b.HasOne("SteamNexus.Models.RecommendedRequirement", "RecReq")
                        .WithMany("Games")
                        .HasForeignKey("RecReqId")
                        .IsRequired()
                        .HasConstraintName("FK_Games_RecommendedRequirements");

                    b.Navigation("MinReq");

                    b.Navigation("RecReq");
                });

            modelBuilder.Entity("SteamNexus.Models.GameLanguage", b =>
                {
                    b.HasOne("SteamNexus.Models.Game", "Game")
                        .WithMany("GameLanguages")
                        .HasForeignKey("GameId")
                        .IsRequired()
                        .HasConstraintName("FK_GameLanguages_Games");

                    b.HasOne("SteamNexus.Models.Language", "Language")
                        .WithMany("GameLanguages")
                        .HasForeignKey("LanguageId")
                        .IsRequired()
                        .HasConstraintName("FK_GameLanguages_Languages");

                    b.Navigation("Game");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("SteamNexus.Models.MinimumRequirement", b =>
                {
                    b.HasOne("SteamNexus.Models.CPU", "CPU")
                        .WithMany("MinimumRequirements")
                        .HasForeignKey("GPUId")
                        .IsRequired()
                        .HasConstraintName("FK_MinimumRequirements_GPUs");

                    b.HasOne("SteamNexus.Models.GPU", "GPU")
                        .WithMany("MinimumRequirements")
                        .HasForeignKey("GPUId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CPU");

                    b.Navigation("GPU");
                });

            modelBuilder.Entity("SteamNexus.Models.PlayersHistory", b =>
                {
                    b.HasOne("SteamNexus.Models.Game", "Game")
                        .WithMany("PlayersHistories")
                        .HasForeignKey("GameId")
                        .IsRequired()
                        .HasConstraintName("FK_PlayersHistories_Games");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("SteamNexus.Models.PriceHistory", b =>
                {
                    b.HasOne("SteamNexus.Models.Game", "Game")
                        .WithMany("PriceHistories")
                        .HasForeignKey("GameId")
                        .IsRequired()
                        .HasConstraintName("FK_PriceHistories_Games");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("SteamNexus.Models.ProductCpu", b =>
                {
                    b.HasOne("SteamNexus.Models.CPU", "Cpu")
                        .WithMany("ProductCpus")
                        .HasForeignKey("Cpuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamNexus.Models.ProductInformation", "ProductInformation")
                        .WithMany("ProductCpus")
                        .HasForeignKey("ProductInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cpu");

                    b.Navigation("ProductInformation");
                });

            modelBuilder.Entity("SteamNexus.Models.ProductGpu", b =>
                {
                    b.HasOne("SteamNexus.Models.GPU", "Gpu")
                        .WithMany("ProductGpus")
                        .HasForeignKey("Gpuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamNexus.Models.ProductInformation", "ProductInformation")
                        .WithMany("ProductGpus")
                        .HasForeignKey("ProductInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gpu");

                    b.Navigation("ProductInformation");
                });

            modelBuilder.Entity("SteamNexus.Models.ProductInformation", b =>
                {
                    b.HasOne("SteamNexus.Models.ProductCategory", "ProductCategory")
                        .WithMany("ProductInformations")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("SteamNexus.Models.ProductRam", b =>
                {
                    b.HasOne("SteamNexus.Models.ProductInformation", "ProductInformation")
                        .WithMany("ProductRams")
                        .HasForeignKey("ProductInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductInformation");
                });

            modelBuilder.Entity("SteamNexus.Models.RecommendedRequirement", b =>
                {
                    b.HasOne("SteamNexus.Models.CPU", "CPU")
                        .WithMany("RecommendedRequirements")
                        .HasForeignKey("GPUId")
                        .IsRequired()
                        .HasConstraintName("FK_RecommendedRequirements_GPUs");

                    b.HasOne("SteamNexus.Models.GPU", "GPU")
                        .WithMany("RecommendedRequirements")
                        .HasForeignKey("GPUId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CPU");

                    b.Navigation("GPU");
                });

            modelBuilder.Entity("SteamNexus.Models.TagGroup", b =>
                {
                    b.HasOne("SteamNexus.Models.Game", "Game")
                        .WithMany("TagGroups")
                        .HasForeignKey("GameId")
                        .IsRequired()
                        .HasConstraintName("FK_TagGroups_Games");

                    b.HasOne("SteamNexus.Models.Tag", "Tag")
                        .WithMany("TagGroups")
                        .HasForeignKey("TagId")
                        .IsRequired()
                        .HasConstraintName("FK_TagGroups_Tags");

                    b.Navigation("Game");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("SteamNexus.Models.CPU", b =>
                {
                    b.Navigation("MinimumRequirements");

                    b.Navigation("ProductCpus");

                    b.Navigation("RecommendedRequirements");
                });

            modelBuilder.Entity("SteamNexus.Models.GPU", b =>
                {
                    b.Navigation("MinimumRequirements");

                    b.Navigation("ProductGpus");

                    b.Navigation("RecommendedRequirements");
                });

            modelBuilder.Entity("SteamNexus.Models.Game", b =>
                {
                    b.Navigation("GameLanguages");

                    b.Navigation("PlayersHistories");

                    b.Navigation("PriceHistories");

                    b.Navigation("TagGroups");
                });

            modelBuilder.Entity("SteamNexus.Models.Language", b =>
                {
                    b.Navigation("GameLanguages");
                });

            modelBuilder.Entity("SteamNexus.Models.MinimumRequirement", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("SteamNexus.Models.ProductCategory", b =>
                {
                    b.Navigation("ProductInformations");
                });

            modelBuilder.Entity("SteamNexus.Models.ProductInformation", b =>
                {
                    b.Navigation("ProductCpus");

                    b.Navigation("ProductGpus");

                    b.Navigation("ProductRams");
                });

            modelBuilder.Entity("SteamNexus.Models.RecommendedRequirement", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("SteamNexus.Models.Tag", b =>
                {
                    b.Navigation("TagGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
